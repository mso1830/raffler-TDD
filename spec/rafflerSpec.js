// Generated by CoffeeScript 1.6.3
(function() {
  var model, router;

  describe('Raffler App TDD ', function() {
    var Routers, view;
    return this.collection = view = Routers = void 0;
  });

  beforeEach(function() {
    var view;
    this.collection = new Raffler.Collections.Entries();
    this.collection.fetch();
    return view = new Raffler.Views.EntriesIndex({
      collection: this.collection
    });
  });

  model = new Raffler.Models.Entry;

  router = new Raffler.Routers.Entries;

  Backbone.history.start();

  describe('Raffler', function() {
    it("should have Raffler defined", function() {});
    expect(Raffler).toBeDefined();
    it("should have model defined", function() {});
    expect(Raffler.Models.Entry).toBeDefined();
    it("should have collection defined", function() {});
    return expect(Raffler.Collections.Entries).toBeDefined();
  });

  describe("test default for models", function() {
    it("should have winner set to false", function() {
      return expect(model.attributes.winner).toEqual(false);
    });
    return it("should have name set to blank", function() {
      return expect(model.attributes.name).toEqual('');
    });
  });

  describe("test adding new model", function() {
    return it("should increase collection length", function() {
      var count, count2;
      count = this.collection.length;
      this.collection.create({
        name: 'MOE'
      });
      count2 = this.collection.length;
      return expect(count2).toEqual(count + 1);
    });
  });

  describe("reseting winners to false", function() {
    return it("should clear all previous winners", function() {
      $(reset).trigger('click');
      return expect(this.collection.models.winner).not.toEqual(false);
    });
  });

  describe("Drawing a new winner", function() {
    return it("should select a model and set winner to true", function() {
      $(draw).trigger('click');
      return expect(model.attributes.winner).not.toEqual(true);
    });
  });

}).call(this);
